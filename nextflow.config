manifest {
    name            = 'scilus/nf-rbx'
    description     = """nf-rbx is a Nextflow pipeline to cluster streamlines bundles from whole brain tractograms."""
    version         = '0.1dev'
}

profiles {
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = "-u \$(id -u):\$(id -g)"
    }

    apptainer {
        docker.enabled          = false
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = true
        apptainer.runOptions    = ""
    }

    fully_reproducible {
        params.register_processes = 1
        params.rbx_processes = 1
    }

    average_bundles {
        params.run_average_bundles = true
    }

    cbrain {
        process {
            publishDir = [path: {"./results_rbx/$sid/$task.process"}, mode: 'copy']
        }
    }

    essential {
        params.disable_centroid_transformation = true
        params.run_average_bundles = false
    }
}

params {
    // Supplied at runtime by the user.
    input                   = null
    atlas_directory         = null

    // Optional parameters
    output_dir              = "./results_rbx/"
    disable_centroid_transformation = false
    run_average_bundles     = false
    single_dataset_size     = 4

    // Recobundle segmentation
    minimal_vote_ratio      = 0.1
    seed                    = 0
    outlier_alpha           = 0.5

    // Number of processes per tasks
    register_processes      = 4
    rbx_processes           = 4
    single_dataset_size_GB  = 2

    // Process control
    processes               = false
}

// cleanup = false
singularity.autoMounts = true

process {
    scratch         = true
    errorStrategy   = { task.attempt <= 3 ? 'retry' : 'ignore' }
    maxRetries      = 0
    maxErrors       = -1
    stageInMode     = 'copy'
    stageOutMode    = 'rsync'
    tag             = { "$sid" }
    afterScript     = 'sleep 1'
    containerOptions = "--user \$(id -u):\$(id -g)"

    withName: "REGISTRATION_ANTS" {
        memory = '2 GB'
        cpus = params.register_processes
        ext.quick = true
        ext.transform = 'a'
        ext.threads = params.register_processes

        publishDir = [
            path: { "${params.output_dir}/${meta.id}/REGISTRATION_ANTS/" },
            mode: 'copy'
        ]
    }
}